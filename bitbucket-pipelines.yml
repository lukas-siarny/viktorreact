image: node:16.18.0
# be sure that clone enoughth commits
clone:
  depth: 150
options:
  docker: true
  max-time: 20
  size: 2x

definitions:
  services:
      # Define the default Docker service with 1 GB memory limit
    docker:
        memory: 1024
    docker-3g:
        # You will have to define the service type if it is docker
        type: docker
        memory: 3096
  caches:
    cypress: $HOME/.cache/Cypress
    frontend: $BITBUCKET_CLONE_DIR/node_modules
  steps:
    - step: &npm-install
        name: Install npm modules
        script:
          - npm install --legacy-peer-deps
        caches:
          - node
        artifacts:
          - node_modules/**
    - step: &lint-check
        name: Lint checking code
        script:
          - npm run lint

pipelines:
  tags:
    'v*':
      - step: *npm-install
      - parallel:
        - step: *lint-check
        - step:
              name: Build application
              script:
                - SENTRY_AUTH_TOKEN=$SENTRY_AUTH_TOKEN SENTRY_URL=$SENTRY_URL CI=false npm run release
              artifacts:
                - build/**
      - step:
          name: Build and push docker image
          image: amazon/aws-cli
          script:
            - find build/static/js/ -name "*.map" -type f -delete
            - export AWS_ECR_NAME=809210427750.dkr.ecr.eu-central-1.amazonaws.com
            - export AWS_TAG=$AWS_ECR_NAME/notino-b2b-web:$BITBUCKET_TAG
            - docker build -t $AWS_TAG -f docker/Dockerfile.web .
            - aws ecr get-login-password --region eu-central-1 | docker login --username AWS --password-stdin $AWS_ECR_NAME
            - docker push $AWS_TAG
  branches:
    'version-*':
      - step: *npm-install
      - parallel:
        - step: *lint-check
        - step:
            name: Build and push docker image
            script:
              - CI=false npm run build
    development:
      - step: *npm-install
      - parallel:
        - step: *lint-check
        - step:
            name: Build and push docker image
            script:
              - CI=false npm run build
    production:
      - step: *npm-install
      - parallel:
        - step: *lint-check
        - step:
            name: Build and push docker image
            script:
              - CI=false npm run build

  pull-requests:
    'NOT-*':
      - step: *npm-install
      - parallel:
          - step: *lint-check
          - step:
              name: Build and push docker image
              script:
                - CI=false npm run build
  custom:
    e2e:
        - step:
            max-time: 40
            size: 2x
            name: run Test
            image: cypress/browsers:node16.13.0-chrome95-ff94
            caches:
              - cypress
              - frontend
            services:
              - docker-3g
            script:
              - git clone git@bitbucket.org:GoodRequest/notino_backend.git
              - echo "127.0.0.1 s3.eu-central-1.localhost" >> /etc/hosts
              - echo "127.0.0.1 sample-bucket.s3.eu-central-1.localhost" >> /etc/hosts
              - curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
              - chmod +x /usr/local/bin/docker-compose
              - npm install --legacy-peer-deps
              - docker-compose up -d
              # needs to check/implement -> how to hold context of wait-for-it for DB service in backend
              - sleep 105
              - mkdir docker_logs && docker-compose logs --no-color >& docker_logs/logs.txt
              - npm run test:CI
            artifacts: # store cypress images, videos and BE logs
              - cypress/screenshots/**
              - cypress/videos/**
              - notino_backend/logs/**
              - docker_logs/**
