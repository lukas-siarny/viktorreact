import React, { useEffect, useState } from 'react'
import { useDispatch, useSelector } from 'react-redux'
import decode from 'jwt-decode'
import qs from 'qs'
import { Navigate } from 'react-router'
import i18next from 'i18next'

// interfaces
import { Button, Divider, Result, Spin } from 'antd'
import { useTranslation } from 'react-i18next'
import dayjs from 'dayjs'
import { ICreatePasswordForm } from '../../types/interfaces'

// actions
import { processAuthorizationResult } from '../../reducers/users/userActions'

// utils
import { getReq, patchReq, postReq } from '../../utils/request'

// hooks
import useQueryParams, { StringParam } from '../../hooks/useQueryParams'

import { ReactComponent as ReservationsIcon } from '../../assets/icons/reservations.svg'
import { ReactComponent as TimerIcon } from '../../assets/icons/timer-16-icon.svg'
import { ReactComponent as WalletIcon } from '../../assets/icons/wallet.svg'
import { ReactComponent as EmployeeIcon } from '../../assets/icons/employees-16-current-color.svg'
import { ReactComponent as CloseIcon } from '../../assets/icons/close-icon-2.svg'

import { ReactComponent as SalonIcon } from '../../assets/icons/salon-24-icon.svg'
import { D_M_YEAR_FORMAT, ENUMERATIONS_KEYS } from '../../utils/enums'
import { RootState } from '../../reducers'
import { decodePrice, getAssignedUserLabel, getCountryPrefix, getServiceRange } from '../../utils/helper'
import ConfirmModal from '../../atoms/ConfirmModal'

const REQUESTS_CONFIG = {
	headers: {
		Authorization: undefined
	}
}

const fakeData = {
	reservation: {
		id: '3fa85f64-5717-4562-b3fc-2c963f66afa6',
		eventType: 'RESERVATION',
		start: {
			date: '2023-03-31',
			time: '15:00'
		},
		end: {
			date: '2023-03-31',
			time: '17:43'
		},
		noteFromB2CCustomer: 'lorem impsum note',
		reservationData: {
			state: 'PENDING',
			createSourceType: 'ONLINE',
			employeeAssignmentType: 'USER',
			priceFrom: {
				currency: 'EUR',
				currencySymbol: '€',
				exponent: 2,
				significand: 10
			},
			priceTo: {
				currency: 'EUR',
				currencySymbol: '€',
				exponent: 2,
				significand: 20
			},
			paymentMethod: 'CASH'
		},
		reservation: {
			review: {
				id: '3fa85f64-5717-4562-b3fc-2c963f66afa6',
				rating: 5,
				partialRatings: {
					COMMUNICATION: 5,
					GENERAL_IMPRESSION: 5,
					PLACE: 5,
					SERVICE: 5
				},
				reviewerName: 'Jane Doe',
				deviceID: 'sdsdsdsds',
				reviewMessage: 'lorem impsum note',
				isOwned: true,
				b2cUserID: '3fa85f64-5717-4562-b3fc-2c963f66afa6',
				calendarEventID: '3fa85f64-5717-4562-b3fc-2c963f66afa6',
				createdAt: '2023-03-23T17:01:03.634Z'
			}
		},
		customer: {
			id: '3fa85f64-5717-4562-b3fc-2c963f66afa6',
			firstName: 'John',
			lastName: 'Doe',
			email: 'john.doe@goodrequest.com',
			phonePrefixCountryCode: 'SK',
			phone: '906047188'
		},
		employee: {
			id: '3fa85f64-5717-4562-b3fc-2c963f66afa6',
			firstName: 'Lubos',
			lastName: 'Blaha',
			email: 'michal.bella@goodrequest.com',
			color: '#Aec',
			image: {
				id: '3fa85f64-5717-4562-b3fc-2c963f66afa6',
				original: 'string',
				fileName: 'string',
				resizedImages: {
					thumbnail: 'string',
					small: 'string',
					medium: 'string',
					large: 'string'
				},
				isAutogenerated: true
			}
		},
		service: {
			id: '3fa85f64-5717-4562-b3fc-2c963f66afa6',
			name: 'Boys cut',
			icon: {
				id: '3fa85f64-5717-4562-b3fc-2c963f66afa6',
				original: 'https://d1pfrdq2i86yn4.cloudfront.net/categories/9c6a2b33-4fcd-4ea4-8c0d-4b92199d3159_4aaebfdd-89ab-4f53-8a63-2932d901a577_Damske%20kadernictvo.png',
				fileName: 'string',
				resizedImages: {
					thumbnail:
						'https://d1pfrdq2i86yn4.cloudfront.net/categories/9c6a2b33-4fcd-4ea4-8c0d-4b92199d3159_4aaebfdd-89ab-4f53-8a63-2932d901a577_Damske%20kadernictvo.png',
					small: 'https://d1pfrdq2i86yn4.cloudfront.net/categories/9c6a2b33-4fcd-4ea4-8c0d-4b92199d3159_4aaebfdd-89ab-4f53-8a63-2932d901a577_Damske%20kadernictvo.png',
					medium: 'https://d1pfrdq2i86yn4.cloudfront.net/categories/9c6a2b33-4fcd-4ea4-8c0d-4b92199d3159_4aaebfdd-89ab-4f53-8a63-2932d901a577_Damske%20kadernictvo.png',
					large: 'https://d1pfrdq2i86yn4.cloudfront.net/categories/9c6a2b33-4fcd-4ea4-8c0d-4b92199d3159_4aaebfdd-89ab-4f53-8a63-2932d901a577_Damske%20kadernictvo.png'
				},
				isAutogenerated: true
			}
		},
		serviceCategoryParameterValue: {
			id: '3fa85f64-5717-4562-b3fc-2c963f66afa6',
			categoryParameterValue: {
				id: '3fa85f64-5717-4562-b3fc-2c963f66afa6',
				value: 'string'
			}
		},
		calendarBulkEvent: {
			id: '3fa85f64-5717-4562-b3fc-2c963f66afa6'
		},
		salon: {
			id: '3fa85f64-5717-4562-b3fc-2c963f66afa6',
			name: 'Testerský salon Peter 2',
			rating: 5,
			logo: {
				id: '63c1ca08-2e1f-4558-b54c-e4cc5bacad8b',
				original: 'https://d1pfrdq2i86yn4.cloudfront.net/salons/5d6283dd-14a5-472d-9cf6-c800993cc4cd_logo.png',
				resizedImages: {
					thumbnail: 'https://d1pfrdq2i86yn4.cloudfront.net/salons/5d6283dd-14a5-472d-9cf6-c800993cc4cd_logo-thumbnail.png',
					small: 'https://d1pfrdq2i86yn4.cloudfront.net/salons/5d6283dd-14a5-472d-9cf6-c800993cc4cd_logo-small.png',
					medium: 'https://d1pfrdq2i86yn4.cloudfront.net/salons/5d6283dd-14a5-472d-9cf6-c800993cc4cd_logo-medium.png',
					large: 'https://d1pfrdq2i86yn4.cloudfront.net/salons/5d6283dd-14a5-472d-9cf6-c800993cc4cd_logo-large.png'
				},
				fileName: 'logo.png',
				isAutogenerated: false
			},
			images: [
				{
					id: '3fa85f64-5717-4562-b3fc-2c963f66afa6',
					original: 'string',
					fileName: 'string',
					resizedImages: {
						thumbnail: 'string',
						small: 'string',
						medium: 'string',
						large: 'string'
					},
					isAutogenerated: true,
					orderIndex: 0,
					isCover: true
				}
			],
			phones: [
				{
					id: '3fa85f64-5717-4562-b3fc-2c963f66afa6',
					phonePrefixCountryCode: 'SK',
					phone: '906047188'
				}
			],
			address: {
				countryCode: 'SK',
				zipCode: '05201',
				city: 'Spišská Nová Ves',
				street: 'Brezová',
				streetNumber: '55',
				latitude: 90,
				longitude: 180
			},
			formattedAddress: 'string'
		},
		createdAt: '2023-03-23T17:01:03.634Z',
		updatedAt: '2023-03-23T17:01:03.634Z',
		deletedAt: '2023-03-23T17:01:03.634Z'
	}
}
const CancelReservationPage = () => {
	const [t] = useTranslation()
	const payload = { salonID: 'sdsd', customerID: 'sdsd', calendarEventID: 'ssss' } as any
	const calendarEventID = payload?.calendarEventID

	const [isLoading, setIsLoading] = useState(false)
	const [view, setView] = useState<'default' | 'success' | 'error'>()
	const [isConfirmModalOpen, setIsConfirmModalOpen] = useState(false)
	const [calendarEventData, setCalendarEventData] = useState<(typeof fakeData)['reservation'] | null>(null)

	const countriesData = useSelector((state: RootState) => state.enumerationsStore?.[ENUMERATIONS_KEYS.COUNTRIES])

	useEffect(() => {
		;(async () => {
			setIsLoading(true)
			try {
				const { data } = await getReq('/api/b2c/web/calendar-events/reservations/{calendarEventID}' as any, { calendarEventID }, REQUESTS_CONFIG)
				setCalendarEventData(fakeData.reservation)
				setView('default')
			} catch (e) {
				// eslint-disable-next-line no-console
				console.error(e)
				setView('default')
				setCalendarEventData(fakeData.reservation)
				// setView('error')
			} finally {
				setIsLoading(false)
			}
		})()
	}, [calendarEventID])

	const handleCancelReservation = async () => {
		setIsConfirmModalOpen(false)
		setIsLoading(true)
		try {
			await patchReq('/api/b2c/web/calendar-events/reservations/{calendarEventID}/cancel' as any, { calendarEventID }, {}, REQUESTS_CONFIG)
			setView('success')
		} catch (e) {
			// eslint-disable-next-line no-console
			console.error(e)
		} finally {
			setIsLoading(false)
			setView('success')
		}
	}

	let salonPhoneNumber = ''

	if (calendarEventData?.salon?.phones?.length) {
		const phoneNumber = calendarEventData.salon.phones[0]
		const prefix = getCountryPrefix(countriesData.data, phoneNumber.phonePrefixCountryCode)
		salonPhoneNumber = `${prefix} ${phoneNumber.phone}`
	}

	const getEventDateTimeRange = () => {
		let eventDateTimeRange = ''
		if (calendarEventData) {
			const date = dayjs(calendarEventData.start.date).format(D_M_YEAR_FORMAT)
			const time = `${calendarEventData.start.time} - ${calendarEventData.end.time}`
			eventDateTimeRange = `${t('loc:{{ date }} v čase {{ time }}', { date, time })}`
		}
		return eventDateTimeRange
	}

	const employeeName = getAssignedUserLabel({ firstName: calendarEventData?.employee.firstName, lastName: calendarEventData?.employee.lastName, id: '' })

	const renderContent = () => {
		if (view === 'default') {
			return (
				<>
					<h3 className={'flex items-center text-lg my-2 gap-2'}>
						{<img src={calendarEventData?.service.icon.resizedImages.thumbnail} alt={''} width={24} height={24} className={'object-contain'} /> || (
							<ReservationsIcon width={24} height={24} />
						)}
						<span className={'truncate'}>{calendarEventData?.service?.name || t('loc:Rezervácia')}</span>
					</h3>
					<Divider className={'my-1'} />
					<div className={'flex flex-col gap-2 mt-4 mb-8'}>
						<div className={'flex items-start gap-2'}>
							<TimerIcon width={16} height={16} />
							<span className={'inline-flex gap-2 flex-wrap'}>
								{getEventDateTimeRange()}
								{calendarEventData?.createdAt ? (
									<span className={'text-notino-grayDark italic'}>{`(vytvorená ${dayjs(calendarEventData?.createdAt).format(
										`${D_M_YEAR_FORMAT}, HH:mm`
									)})`}</span>
								) : (
									''
								)}
							</span>
						</div>
						<div className={'flex items-start gap-2'}>
							<WalletIcon width={16} height={16} />
							{getServiceRange(
								decodePrice(calendarEventData?.reservationData.priceFrom),
								decodePrice(calendarEventData?.reservationData.priceTo),
								calendarEventData?.reservationData.priceFrom.currencySymbol
							) || '-'}
						</div>
						{employeeName && (
							<div className={'flex items-start gap-2'}>
								<EmployeeIcon width={16} height={16} />
								{t('loc:službu vykonáva {{ employeeName }}', { employeeName })}
							</div>
						)}
					</div>

					<div className={'w-full p-4 bg-notino-white rounded mb-8'}>
						<h4 className={'flex items-center text-base truncate inline-block'}>{calendarEventData?.salon?.name || t('loc:Kontaktné informácie salónu')}</h4>
						<Divider className={'mt-1 mb-4'} />
						<div className={'flex items-start gap-2'}>
							<div className={'flex-1'}>
								<ul className={'noti-contact-list'}>
									{salonPhoneNumber && (
										<li className={'phone-list-item'}>
											<a href={`tel:${salonPhoneNumber}`}>{salonPhoneNumber}</a>
										</li>
									)}
									<li className={'address-list-item'}>
										<div className={'flex flex-col'}>
											{calendarEventData?.salon?.address?.street && (
												<div>
													<span className={'break-all mr-1'}>{calendarEventData.salon.address.street.trim()}</span>
													{calendarEventData?.salon?.address?.streetNumber?.trim()}
												</div>
											)}
											<div>
												{calendarEventData?.salon?.address?.zipCode && <span className={'mr-1'}>{calendarEventData.salon.address.zipCode.trim()}</span>}
												<span className={'break-all'}>{calendarEventData?.salon?.address?.city?.trim()}</span>
											</div>
											{calendarEventData?.salon?.address.countryCode}
										</div>
									</li>
								</ul>
							</div>
							<img
								src={calendarEventData?.salon.logo.resizedImages.small}
								alt={''}
								width={80}
								height={80}
								className={'object-contain shrink-0'}
								// className={'object-contain shrink-0 rounded-lg border border-solid border-notino-grayLight'}
							/>
						</div>
					</div>

					<Button type={'primary'} size={'large'} className={'noti-btn w-full'} onClick={() => setIsConfirmModalOpen(true)}>
						{t('loc:Zrušiť rezerváciu')}
					</Button>
					<ConfirmModal
						loading={isLoading}
						disabled={isLoading}
						closeIcon={<CloseIcon />}
						destroyOnClose
						open={isConfirmModalOpen}
						onOk={handleCancelReservation}
						onCancel={() => setIsConfirmModalOpen(false)}
						title={t('loc:Zrušenie rezervácie')}
						okText={t('loc:Áno')}
						cancelText={t('loc:Nie')}
					>
						{`${t('loc:Naozaj si prajete zrušiť rezerváciu služby {{ serviceName }} v salóne {{ salonName }} naplánovanú na {{ dateTime }}?', {
							salonName: calendarEventData?.salon.name || '',
							serviceName: calendarEventData?.service?.name,
							dateTime: getEventDateTimeRange()
						})}`}
					</ConfirmModal>
				</>
			)
		}

		if (view === 'error') {
			return (
				<Result
					status='500'
					subTitle={<span className={'text-gray-600 text-base'}>{t('loc:Rezervácia je už zrušená alebo platnosť odkazu na zrušenie rezervácie už vypršala')}</span>}
				/>
			)
		}

		if (view === 'success') {
			return (
				<Result
					status='success'
					title={t('loc:Rezervácia bola úspešne zrušená')}
					subTitle={
						<span className={'text-gray-600 text-base'}>
							{`${t('loc:Rezervácia služby {{ serviceName }} v salóne {{ salonName }} naplánovana na {{ dateTime }} bola úspešne zrušená.', {
								salonName: calendarEventData?.salon.name || '',
								serviceName: calendarEventData?.service?.name,
								dateTime: getEventDateTimeRange()
							})}`}
						</span>
					}
				/>
			)
		}

		return null
	}

	return (
		<>
			<div className={'w-full noti-cancel-reservation-wrapper'}>
				<Spin spinning={isLoading}>
					<h3 className={'text-center'}>{t('loc:Zrušenie rezervácie')}</h3>
					{renderContent()}
				</Spin>
			</div>
		</>
	)
}

export default CancelReservationPage
